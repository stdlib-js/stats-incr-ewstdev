{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isNonNegativeNumber } from '@stdlib/assert-is-nonnegative-number';\nimport format from '@stdlib/string-format';\nimport sqrt from '@stdlib/math-base-special-sqrt';\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes an exponentially weighted standard deviation.\n*\n* @param {NonNegativeNumber} alpha - smoothing factor\n* @throws {TypeError} must provide a nonnegative number\n* @throws {RangeError} must be on the interval `[0,1]`\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = increwstdev( 0.5 );\n*\n* var s = accumulator();\n* // returns null\n*\n* s = accumulator( 2.0 );\n* // returns 0.0\n*\n* s = accumulator( -5.0 );\n* // returns 3.5\n*\n* s = accumulator();\n* // returns 3.5\n*/\nfunction increwstdev( alpha ) {\n\tvar incr;\n\tvar s2;\n\tvar s;\n\tvar r;\n\tvar m;\n\tvar c;\n\tif ( !isNonNegativeNumber( alpha ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide a nonnegative number. Value: `%s`.', alpha ) );\n\t}\n\tif ( alpha < 0.0 || alpha > 1.0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Must provide a nonnegative number on the interval: [0, 1]. Value: `%f`.', alpha ) );\n\t}\n\tc = 1.0 - alpha;\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated standard deviation. If not provided a value, the accumulator function returns the current standard deviation.\n\t*\n\t* @private\n\t* @param {number} [x] - new value\n\t* @returns {(number|null)} standard deviation or null\n\t*/\n\tfunction accumulator( x ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn ( s === void 0 ) ? null : s;\n\t\t}\n\t\tif ( s === void 0 ) {\n\t\t\tm = x;\n\t\t\ts2 = 0.0;\n\t\t} else {\n\t\t\tr = x - m;\n\t\t\tincr = alpha * r;\n\t\t\tm += incr;\n\t\t\ts2 = c * ( s2+(r*incr) );\n\t\t}\n\t\ts = sqrt( s2 );\n\t\treturn s;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default increwstdev;\n"],"names":["increwstdev","alpha","incr","s2","s","r","m","c","isNonNegativeNumber","TypeError","format","RangeError","x","arguments","length","sqrt"],"mappings":";;+SAoDA,SAASA,EAAaC,GACrB,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACJ,IAAMC,EAAqBP,GAC1B,MAAM,IAAIQ,UAAWC,EAAQ,oEAAqET,IAEnG,GAAKA,EAAQ,GAAOA,EAAQ,EAC3B,MAAM,IAAIU,WAAYD,EAAQ,4FAA6FT,IAG5H,OADAM,EAAI,EAAMN,EAUV,SAAsBW,GACrB,GAA0B,IAArBC,UAAUC,OACd,YAAe,IAANV,EAAiB,KAAOA,OAEvB,IAANA,GACJE,EAAIM,EACJT,EAAK,IAILG,GADAJ,EAAOD,GADPI,EAAIO,EAAIN,GAGRH,EAAKI,GAAMJ,EAAIE,EAAEH,IAGlB,OADAE,EAAIW,EAAMZ,EAEV,CACF"}